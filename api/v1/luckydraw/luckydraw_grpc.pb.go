// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/luckydraw.proto

package luckydraw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Luckydraw_Roll_FullMethodName = "/luckydraw.v1.Luckydraw/Roll"
)

// LuckydrawClient is the client API for Luckydraw service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LuckydrawClient interface {
	Roll(ctx context.Context, in *RollRquest, opts ...grpc.CallOption) (*RollReply, error)
}

type luckydrawClient struct {
	cc grpc.ClientConnInterface
}

func NewLuckydrawClient(cc grpc.ClientConnInterface) LuckydrawClient {
	return &luckydrawClient{cc}
}

func (c *luckydrawClient) Roll(ctx context.Context, in *RollRquest, opts ...grpc.CallOption) (*RollReply, error) {
	out := new(RollReply)
	err := c.cc.Invoke(ctx, Luckydraw_Roll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LuckydrawServer is the server API for Luckydraw service.
// All implementations must embed UnimplementedLuckydrawServer
// for forward compatibility
type LuckydrawServer interface {
	Roll(context.Context, *RollRquest) (*RollReply, error)
	mustEmbedUnimplementedLuckydrawServer()
}

// UnimplementedLuckydrawServer must be embedded to have forward compatible implementations.
type UnimplementedLuckydrawServer struct {
}

func (UnimplementedLuckydrawServer) Roll(context.Context, *RollRquest) (*RollReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Roll not implemented")
}
func (UnimplementedLuckydrawServer) mustEmbedUnimplementedLuckydrawServer() {}

// UnsafeLuckydrawServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LuckydrawServer will
// result in compilation errors.
type UnsafeLuckydrawServer interface {
	mustEmbedUnimplementedLuckydrawServer()
}

func RegisterLuckydrawServer(s grpc.ServiceRegistrar, srv LuckydrawServer) {
	s.RegisterService(&Luckydraw_ServiceDesc, srv)
}

func _Luckydraw_Roll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollRquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuckydrawServer).Roll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Luckydraw_Roll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuckydrawServer).Roll(ctx, req.(*RollRquest))
	}
	return interceptor(ctx, in, info, handler)
}

// Luckydraw_ServiceDesc is the grpc.ServiceDesc for Luckydraw service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Luckydraw_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "luckydraw.v1.Luckydraw",
	HandlerType: (*LuckydrawServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Roll",
			Handler:    _Luckydraw_Roll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/luckydraw.proto",
}
